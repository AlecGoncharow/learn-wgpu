#version 450

#define VERTICES_PER_INDEX 3
layout(local_size_x = VERTICES_PER_INDEX) in;

// Should match the struct in model.rs
struct ModelVertex {
    vec3 position;
    vec3 tex_coords;
    vec3 normal;
    vec3 tangent;
    vec3 bitangent;
};

layout(std140, binding=0) buffer VertexBuffer {
    ModelVertex Vertices[];
};
layout(std140, binding=1) buffer IndexBuffer {
    uint Indices[];
};

void main() {
    uint index = gl_GlobalInvocationID.x;

    // Grab the indices for the triangle
    uint i0 = Indices[index];
    uint i1 = Indices[index + 1];
    uint i2 = Indices[index + 2];
    
    // Grab the vertices for the triangle
    ModelVertex v0 = Vertices[i0];
    ModelVertex v1 = Vertices[i1];
    ModelVertex v2 = Vertices[i2];

    // Grab the position and uv components of the vertices
    vec3 pos0 = v0.position;
    vec3 pos1 = v1.position;
    vec3 pos2 = v2.position;
    vec3 uv0 = v0.tex_coords;
    vec3 uv1 = v1.tex_coords;
    vec3 uv2 = v2.tex_coords;

    // Calculate the edges of the triangle
    vec3 delta_pos1 = pos1 - pos0;
    vec3 delta_pos2 = pos2 - pos0;

    // This will give us a direction to calculate the
    // tangent and bitangent
    vec3 delta_uv1 = uv1 - uv0;
    vec3 delta_uv2 = uv2 - uv0;

    // Solving the following system of equations will
    // give us the tangent and bitangent.
    //     delta_pos1 = delta_uv1.x * T + delta_u.y * B
    //     delta_pos2 = delta_uv2.x * T + delta_uv2.y * B
    // Luckily, the place I found this equation provided
    // the solution!
    float r = 1.0 / (delta_uv1.x * delta_uv2.y - delta_uv1.y * delta_uv2.x);
    vec3 tangent = (delta_pos1 * delta_uv2.y - delta_pos2 * delta_uv1.y) * r;
    vec3 bitangent = (delta_pos2 * delta_uv1.x - delta_pos1 * delta_uv2.x) * r;

    // We'll use the same tangent/bitangent for each vertex in the triangle
    Vertices[i0].tangent = tangent;
    Vertices[i1].tangent = tangent;
    Vertices[i2].tangent = tangent;
    Vertices[i0].bitangent = bitangent;
    Vertices[i1].bitangent = bitangent;
    Vertices[i2].bitangent = bitangent;
}